{"version":2,"kind":"Notebook","sha256":"117a5d27a9fb397be9833c59fa8dc0b283e85f01e283032c46834389dbb3354b","slug":"group-manual-seg","location":"/notebooks/group_manual_seg.ipynb","dependencies":[],"frontmatter":{"title":"üï∞Ô∏è ALL ABOUT DURATIONS AND SEGMENTATION IN THE MANUAL SEGMENTATION DATA üï∞Ô∏è","content_includes_title":false,"kernelspec":{"name":"friends","display_name":"Python (friends)","language":"python"},"github":"https://github.com/brainhack-school2025/analyses_friends_annotations","keywords":[],"edit_url":"https://github.com/brainhack-school2025/analyses_friends_annotations/blob/clean-dev/notebooks/group_manual_seg.ipynb","exports":[{"format":"ipynb","filename":"group_manual_seg.ipynb","url":"/build/group_manual_seg-74e5016485f760454b32637703f19eb2.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport plotly.express as px\nimport friends_pack","visibility":"hide","key":"SBKFFbV1BB"},{"type":"output","id":"t0bNnoshi9eVxQjgrAHlN","data":[],"visibility":"show","key":"WP7XNY6cAj"}],"visibility":"show","key":"wLAXNAktk6"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"df= pd.read_csv(\"../output/manual_segmentation_all.tsv\", sep='\\t')","visibility":"hide","key":"Zkohi3Cu6o"},{"type":"output","id":"zb00CEJoKHbI-sYQdqivQ","data":[],"visibility":"show","key":"emaVLVNHSh"}],"visibility":"show","key":"PzyXqhLzKt"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"#add frames to onset and offset time\nfps = 29.97\ndf['onset_frame'] = (df['onset']*fps).round().astype(int)\ndf['offset_frame'] = (df['offset'] * fps).round().astype(int)\ndf[\"season\"] = df[\"episode\"].str.extract(r's(\\d+)', expand=False).astype(int)","visibility":"hide","key":"eMIJfGbyWp"},{"type":"output","id":"IDaLDgStX-E0jE_KH6FTi","data":[],"visibility":"show","key":"cPZclgWeaM"}],"visibility":"show","key":"L506KZi5El"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"num_segments = df.groupby(\"episode_full\").size().reset_index(name='num_segments')\n","visibility":"hide","key":"hLeX0P0jxM"},{"type":"output","id":"BT9Lz69dtIerJ7bgk3hOp","data":[],"visibility":"show","key":"B2uWdGA3qC"}],"visibility":"show","key":"KbjriVGvHt"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"NUMBER OF SEGMENTS üß© IN EPISODES","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"oIlmLyAdZA"}],"identifier":"number-of-segments-in-episodes","label":"NUMBER OF SEGMENTS üß© IN EPISODES","html_id":"number-of-segments-in-episodes","implicit":true,"key":"n2PEFdlu6e"}],"key":"Xc6g9qB0ze"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"plt.figure(figsize=(20, 8))\nax = sns.barplot(data=num_segments, x=\"episode_full\", y=\"num_segments\", palette=\"viridis\")\nax.set_xticks(ax.get_xticks()[::5])  # show every 5th label\nax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha=\"right\")\nplt.title(\"Number of segments per episode\")\nplt.ylabel(\"n of segments\")\nplt.xlabel(\"Episodes\")\nplt.tight_layout()\nplt.show()","visibility":"hide","key":"fqw0OvHPfe"},{"type":"output","id":"i2HTchBKDQ4DyHnvJHQ2q","data":[{"name":"stderr","output_type":"stream","text":"/tmp/ipykernel_10927/2401707117.py:2: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  ax = sns.barplot(data=num_segments, x=\"episode_full\", y=\"num_segments\", palette=\"viridis\")\n"},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"554fd305857109671bc27024ae5c7f9f","path":"/build/554fd305857109671bc27024ae5c7f9f.png"},"text/plain":{"content":"<Figure size 2000x800 with 1 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"q5JhV8K7sJ"}],"visibility":"show","key":"ByChcYBO6c"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"AVERAGE DURATION üï∞Ô∏è OF SEGMENTS PER EPISODES","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"blXSwnQJn4"}],"identifier":"average-duration-of-segments-per-episodes","label":"AVERAGE DURATION üï∞Ô∏è OF SEGMENTS PER EPISODES","html_id":"average-duration-of-segments-per-episodes","implicit":true,"key":"owjeES1SoX"}],"key":"TXEVda25xv"},{"type":"block","kind":"notebook-code","data":{"scrolled":true,"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"#average duration of scenes per episode for manual segementation\nmean_duration = df.groupby(\"episode_full\")[\"duration\"].mean().reset_index()\n\n\nplt.figure(figsize=(20, 8))\nax = sns.barplot(data=mean_duration, x=\"episode_full\", y=\"duration\", palette=\"viridis\")\nax.set_xticks(ax.get_xticks()[::5])  # show every 5th label\nax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha=\"right\")\nplt.title(\"Average duration of segments per episode\")\nplt.ylabel(\"Average duration (s)\")\nplt.xlabel(\"Episodes\")\nplt.tight_layout()\nplt.show()\n","visibility":"hide","key":"QQhkNSECGT"},{"type":"output","id":"i3uVaDdQjy_YVD7djG_BR","data":[{"name":"stderr","output_type":"stream","text":"/tmp/ipykernel_10927/1605070300.py:6: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  ax = sns.barplot(data=mean_duration, x=\"episode_full\", y=\"duration\", palette=\"viridis\")\n"},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"468b1a8deaa40f705b2ea50b2404d115","path":"/build/468b1a8deaa40f705b2ea50b2404d115.png"},"text/plain":{"content":"<Figure size 2000x800 with 1 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"BKhZDYihWk"}],"visibility":"show","key":"VWqmpjleYg"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"NUMBER OF SEGMENTS üß© PER LOCATION üìçüßõ‚Äç‚ôÇÔ∏è","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"am8poc6865"}],"identifier":"number-of-segments-per-location","label":"NUMBER OF SEGMENTS üß© PER LOCATION üìçüßõ‚Äç‚ôÇÔ∏è","html_id":"number-of-segments-per-location","implicit":true,"key":"Bp8NcM8XbG"}],"key":"SVuVfUqebi"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"location_columns = ['loc_apt1_Mon_Rach', 'loc_apt2_Chan_Joey', 'loc_apt3_Ross', 'loc_apt4_Pheob_Rach',\t'loc_coffeeshop', 'loc_outside', 'loc_other'] \nfriends_pack.boolean_True_plotter(df,location_columns, 'Number of Segments per Location', 'Location', 'Number of segments')","visibility":"hide","key":"UkQegnwXZx"},{"type":"output","id":"YV7emxM8I43sbRH_vZ_Mh","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"48cddd860dcd2926f9321218243e4a53","path":"/build/48cddd860dcd2926f9321218243e4a53.png"},"text/plain":{"content":"<Figure size 2000x1000 with 1 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"AhBn00g754"}],"visibility":"show","key":"LxJi7bmsZ7"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"NUMBER OF SEGMENTS üß© PER ONBOUND/OFFBOUND","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"WzGdcMVRYy"}],"identifier":"number-of-segments-per-onbound-offbound","label":"NUMBER OF SEGMENTS üß© PER ONBOUND/OFFBOUND","html_id":"number-of-segments-per-onbound-offbound","implicit":true,"key":"rSyWvSkbBm"}],"key":"P2uxpDskdE"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"onbound_columns = ['ONbond_location', 'ONbond_charact_entry', 'ONbond_charact_leave', 'ONbond_time_jump', 'ONbond_goal_change', 'ONbond_music_transit',\t'ONbond_theme_song','ONbond_end']\nfriends_pack.boolean_True_plotter(df,onbound_columns, 'Number of segments per ONbound type', 'Onbound type', 'Number of segments')","visibility":"hide","key":"p3k0njakDy"},{"type":"output","id":"AB8jHNAdu6WOCxoPlARm_","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"42ff0bcfddd88b801a23dc22a7c5ee98","path":"/build/42ff0bcfddd88b801a23dc22a7c5ee98.png"},"text/plain":{"content":"<Figure size 2000x1000 with 1 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"d6dxjC8RI6"}],"visibility":"show","key":"gy9TeWVuRX"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"offbound_columns = ['OFFbond_location',\t'OFFbond_charact_entry', 'OFFbond_charact_leave',\t'OFFbond_time_jump', 'OFFbond_goal_change',\t'OFFbond_music_transit',\t'OFFbond_theme_song',\t'OFFbond_end']\nfriends_pack.boolean_True_plotter(df,offbound_columns, 'Number of segments per OFFbound type', 'Offbound type', 'Number of segments')","visibility":"hide","key":"VFjrDz9EF6"},{"type":"output","id":"Ah5mc_jcaH-Khdy_Xc4WJ","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"288a9a66211a44ab5de3b58f3050607c","path":"/build/288a9a66211a44ab5de3b58f3050607c.png"},"text/plain":{"content":"<Figure size 2000x1000 with 1 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"shTUYQPh4D"}],"visibility":"show","key":"phQ6wOctst"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"location_cols = [col for col in df.columns if col.startswith('loc_')]\nid_vars = ['duration', 'season',] \ndf_melted = df.melt(id_vars=['duration', 'season', 'global_segment'],\n                    value_vars=location_cols,\n                    var_name='location',\n                    value_name='is_location')\n\ndf_true = df_melted[df_melted['is_location'] == True]\n\n\n\navg_duration = df_true.groupby('location')['duration'].mean().reset_index()\n\n\n","visibility":"hide","key":"hLdEDHlaMR"},{"type":"output","id":"444KtdteaMShlsQOKGIpz","data":[],"visibility":"show","key":"rVOHUBfJ4e"}],"visibility":"show","key":"xtAiKH76ke"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"AVERAGE SEGMENT DURATION AND SEGMENT üß© DURATION üï∞Ô∏è BY LOCATION üìçüßõ‚Äç‚ôÇÔ∏è","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"sGtj8edGTN"}],"identifier":"average-segment-duration-and-segment-duration-by-location","label":"AVERAGE SEGMENT DURATION AND SEGMENT üß© DURATION üï∞Ô∏è BY LOCATION üìçüßõ‚Äç‚ôÇÔ∏è","html_id":"average-segment-duration-and-segment-duration-by-location","implicit":true,"key":"EwTUbJeyLo"}],"key":"kSE2ojXNcw"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"plt.figure(figsize=(10,6))\nsns.barplot(data=avg_duration, x='location', y='duration', palette='viridis')\nplt.xticks(rotation=45, ha='right')\nplt.title('Average Duration by Location')\nplt.ylabel('Average Duration')\nplt.xlabel('Location')\nplt.tight_layout()\nplt.show()","visibility":"hide","key":"uFuOHorrpY"},{"type":"output","id":"kliteMlONkqu6VxItIJ-r","data":[{"name":"stderr","output_type":"stream","text":"/tmp/ipykernel_10927/707888431.py:2: FutureWarning:\n\n\n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n\n"},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"955a168bf896d962ff653a2472f390af","path":"/build/955a168bf896d962ff653a2472f390af.png"},"text/plain":{"content":"<Figure size 1000x600 with 1 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"L1LDYJB4ZE"}],"visibility":"show","key":"HsFV1A2jGz"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"\nimport plotly.graph_objects as go\n\n# Sort seasons\nseasons = sorted(df_true['season'].unique())\nfig = go.Figure()\n\n# Add one violin plot per season (but only first season is visible by default)\nfor i, season in enumerate(seasons):\n    filtered_df = df_true[df_true['season'] == season]\n\n    fig.add_trace(go.Violin(\n        y=filtered_df[\"duration\"],\n        x=filtered_df[\"location\"],\n        name=f\"Season {season}\",\n        box_visible=True,\n        meanline_visible=True,\n        points=\"all\",\n        hovertext=filtered_df[\"global_segment\"],\n        visible=(i == 0),\n        customdata=filtered_df[['global_segment', 'duration']].values,\n            hovertemplate=(\n                \"location: %{x}<br>\" +\n                \"Global segment: %{customdata[0]}<br>\" +\n                \"Duration: %{customdata[1]} seconds<br>\" +\n                \"<extra></extra>\"  # hides the trace name in the tooltip\n    )))\n\n# Create dropdown buttons to toggle seasons\ndropdown_buttons = [\n    dict(\n        label=f\"Season {season}\",\n        method=\"update\",\n        args=[\n            {\"visible\": [i == j for j in range(len(seasons))]},\n            {\"title\": f\"Segment Duration by Location ‚Äì Season {season}\"}\n        ]\n    )\n    for i, season in enumerate(seasons)\n]\n\n# Update layout with dropdown and labels\nfig.update_layout(\n    updatemenus=[dict(\n        buttons=dropdown_buttons,\n        active=0,\n        x=0.1,\n        y=1.2,\n        xanchor=\"left\",\n        yanchor=\"top\"\n    )],\n    xaxis_title=\"Location\",\n    yaxis_title=\"Duration (seconds)\",\n    title=f\"Segment Duration by Location ‚Äì Season {seasons[0]}\",\n    width=1200,\n    height=600\n)\n\nfig.show()\n","visibility":"hide","key":"bbj5IOS6hT"},{"type":"output","id":"V0XqHVzXrb_d627IKLJrb","data":[{"output_type":"display_data","metadata":{},"data":{"application/vnd.plotly.v1+json":{"content_type":"application/vnd.plotly.v1+json","hash":"b08559426081f68241c798333e37fd2a","path":"/build/b08559426081f68241c798333e37fd2a.json"}}}],"visibility":"show","key":"kUI6pqL821"}],"visibility":"show","key":"loPQwDW8VW"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"ON_cols = [col for col in df.columns if col.startswith('ONbond_')]\nid_vars2 = ['duration', 'season',] \ndf_melted2 = df.melt(id_vars=['duration', 'season', 'global_segment'],\n                    value_vars=ON_cols,\n                    var_name='Onbond',\n                    value_name='is_Onbond')\n\ndf_true2 = df_melted2[df_melted2['is_Onbond'] == True]\n\n","visibility":"hide","key":"yJRWhfhexT"},{"type":"output","id":"Y6V4Cwws4XbGglHCL7OPx","data":[],"visibility":"show","key":"sSpE9hHiLa"}],"visibility":"show","key":"oIVzzDoYT1"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"SEGMENT üß© DURATION üï∞Ô∏è FOR ONBOUND/OFFBOUND TYPE","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"O7nruZCnTw"}],"identifier":"segment-duration-for-onbound-offbound-type","label":"SEGMENT üß© DURATION üï∞Ô∏è FOR ONBOUND/OFFBOUND TYPE","html_id":"segment-duration-for-onbound-offbound-type","implicit":true,"key":"ZkbPEZPqC5"}],"key":"Sy4vHcR4D8"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Sort seasons\nseasons = sorted(df_true2['season'].unique())\nfig = go.Figure()\n\n# Add one violin plot per season (but only first season is visible by default)\nfor i, season in enumerate(seasons):\n    filtered_df2 = df_true2[df_true2['season'] == season]\n\n    fig.add_trace(go.Violin(\n        y=filtered_df2[\"duration\"],\n        x=filtered_df2[\"Onbond\"],\n        name=f\"Season {season}\",\n        box_visible=True,\n        meanline_visible=True,\n        points=\"all\",\n        hovertext=filtered_df2[\"global_segment\"],\n        visible=(i == 0),\n        customdata=filtered_df2[['global_segment', 'duration']].values,\n            hovertemplate=(\n                \"Onbond: %{x}<br>\" +\n                \"Global segment: %{customdata[0]}<br>\" +\n                \"Duration: %{customdata[1]} seconds<br>\" +\n                \"<extra></extra>\"  # hides the trace name in the tooltip\n    )))\n\n# Create dropdown buttons to toggle seasons\ndropdown_buttons = [\n    dict(\n        label=f\"Season {season}\",\n        method=\"update\",\n        args=[\n            {\"visible\": [i == j for j in range(len(seasons))]},\n            {\"title\": f\"Segment Duration by Onbound‚Äì Season {season}\"}\n        ]\n    )\n    for i, season in enumerate(seasons)\n]\n\n# Update layout with dropdown and labels\nfig.update_layout(\n    updatemenus=[dict(\n        buttons=dropdown_buttons,\n        active=0,\n        x=0.1,\n        y=1.2,\n        xanchor=\"left\",\n        yanchor=\"top\"\n    )],\n    xaxis_title=\"Onbound\",\n    yaxis_title=\"Duration (seconds)\",\n    title=f\"Segment Duration by Onbound ‚Äì Season {seasons[0]}\",\n    width=1200,\n    height=600\n)\n\nfig.show()\n","visibility":"hide","key":"D8rcnjopEG"},{"type":"output","id":"SCoCwcRKQwmiFEZneDK72","data":[{"output_type":"display_data","metadata":{},"data":{"application/vnd.plotly.v1+json":{"content_type":"application/vnd.plotly.v1+json","hash":"05e42861607887fbf5a7c97dc6ef41d9","path":"/build/05e42861607887fbf5a7c97dc6ef41d9.json"}}}],"visibility":"show","key":"VZjXY1cJRX"}],"visibility":"show","key":"BhNV8XvJpy"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"SEGMENT üß© DURATION üï∞Ô∏è","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"yX87uhcGa0"}],"identifier":"segment-duration","label":"SEGMENT üß© DURATION üï∞Ô∏è","html_id":"segment-duration","implicit":true,"key":"Vw5gkRl0ki"}],"key":"iMDkJFK9ax"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"import pandas as pd\nimport plotly.graph_objects as go\n\n# Group your data by season\nseasons = sorted(df['season'].unique())\nfig = go.Figure()\n\n# Create one trace per season, initially only show the first\nfor i, season in enumerate(seasons):\n    season_df = df[df['season'] == season]\n    visible = (i == 0)  # Only first season is visible by default\n\n    fig.add_trace(go.Scatter(\n        x=season_df[\"global_segment\"],\n        y=season_df[\"duration\"],\n        mode=\"markers\",\n        name=f\"Season {season}\",\n        visible=visible,\n        customdata=season_df[['global_segment', 'duration']].values,\n            hovertemplate=(\n                \"location: %{x}<br>\" +\n                \"Global segment: %{customdata[0]}<br>\" +\n                \"Duration: %{customdata[1]} seconds<br>\" +\n                \"<extra></extra>\"  # hides the trace name in the tooltip\n    )))\n\n# Create dropdown buttons\ndropdown_buttons = [\n    dict(\n        label=f\"Season {season}\",\n        method=\"update\",\n        args=[\n            {\"visible\": [i == j for j in range(len(seasons))]},\n            {\"title\": f\"Segment Duration ‚Äì Season {season}\"}\n        ]\n    )\n    for i, season in enumerate(seasons)\n]\n\n# Add dropdown to layout\nfig.update_layout(\n    updatemenus=[dict(\n        active=0,\n        buttons=dropdown_buttons,\n        x=0.1,\n        y=1.15,\n        xanchor='left',\n        yanchor='top'\n    )],\n    xaxis_title=\"Global Segment\",\n    yaxis_title=\"Duration (seconds)\",\n    title=f\"Segment Duration ‚Äì Season {seasons[0]}\",\n    width=1000,\n    height=600\n)\n\n\nfig.show()","visibility":"hide","key":"UwLR6YjXaH"},{"type":"output","id":"C1eCrzLX9paHrfGpQHFXo","data":[{"output_type":"display_data","metadata":{},"data":{"application/vnd.plotly.v1+json":{"content_type":"application/vnd.plotly.v1+json","hash":"3a2064bd269c9352b7aeb68d29edf2b0","path":"/build/3a2064bd269c9352b7aeb68d29edf2b0.json"}}}],"visibility":"show","key":"VjCvvFhhOY"}],"visibility":"show","key":"GL5B8oRPuy"}],"key":"okOPMECNuG"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Introduction","url":"/","group":"Introduction"},"next":{"title":"üï∞Ô∏è ALL ABOUT DURATIONS AND SEGMENTATION IN THE PYSCENE DATA üï∞Ô∏è","url":"/group-editing","group":"Introduction"}}},"domain":"http://localhost:3001"}